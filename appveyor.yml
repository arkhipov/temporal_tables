version: 1.2.{build}
pull_requests:
  do_not_increment_build_number: true
os: Visual Studio 2015
configuration: Release
platform:
  - x86
  - x64
clone_depth: 1
environment:
  PGUSER: postgres
  PGPASSWORD: Password12!
  matrix:
  - pg: master
    PlatformToolset: v141
    configuration: Debug
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - pg: 9.4.22-1
    PlatformToolset: v120
  - pg: 9.5.17-1
    PlatformToolset: v120
  - pg: 9.6.13-1
    PlatformToolset: v120
  - pg: 10.8-1
    PlatformToolset: v120
  - pg: 11.3-1
    PlatformToolset: v140
matrix:
  allow_failures:
    - pg: master
    - pg: 9.4.22-1
      platform: x64
    - pg: 9.5.17-1
      platform: x64
  exclude:
    - platform: x86
      pg: 11.3-1
    - platform: x86
      pg: master

init: # Make %exe% available for caching
- if %PLATFORM%==x64 ( set pf=%ProgramFiles%&& set x64=-x64) else set pf=%ProgramFiles(x86)%
- set exe=postgresql-%pg%-windows%x64%.exe
- setx /m exe %exe%

install:

# http://www.databasesoup.com/2016/05/changing-postgresql-version-numbering.html
- for /f "tokens=2 delims=-" %%A in ("%exe%") do set pgversion=%%~nA
- echo pgversion=%pgversion%
- set pgroot=%pf%\PostgreSQL\%pgversion%
- echo %pgroot%
- ps: |
    if ("$env:pg" -eq "master") {
      $env:Path += ";C:\msys64\usr\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64"
      git clone -q --depth 1 https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
      pushd c:\projects\postgresql
      perl src\tools\msvc\build.pl
      perl src\tools\msvc\install.pl "$env:pgroot"
      popd
    } else {
      if (-not (Test-Path "$env:pgroot\bin")) {
        if (-not (Test-Path "$env:exe")) {
          Start-FileDownload "http://get.enterprisedb.com/postgresql/$env:exe"
        }
        & ".\$env:exe" --unattendedmodeui none --mode unattended --superpassword "$env:PGPASSWORD" --servicepassword "$env:PGPASSWORD" | Out-Null
        Stop-Service "postgresql$env:x64-$env:pgversion"
      }
    }

cache:
- '%exe%'

build_script:
- msbuild /p:PlatformToolset=%PlatformToolset% /p:configuration=%CONFIGURATION% /p:platform=%PLATFORM%
          temporal_tables.vcxproj
          /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

after_build:
- set dll=%PLATFORM:x86=.%\%CONFIGURATION%\temporal_tables.dll
- appveyor AddMessage Packing -Category Information
- md tmp\share\extension
- copy *.sql tmp\share\extension\
- copy *.control tmp\share\extension\
- copy LICENSE tmp\TEMPORAL_TABLES_LICENSE
- md tmp\lib
- md tmp\symbols
- copy "%dll%" tmp\lib
- copy "%dll:.dll=.pdb%" tmp\symbols
- set zip=temporal_tables-%APPVEYOR_REPO_COMMIT:~0,8%-pg%pgversion%-%PLATFORM%.zip
- 7z a -r %zip% .\tmp\* > nul

test_script:
- path %pgroot%\bin;%PATH%
- appveyor AddMessage "Copying the extension files to the PostgreSQL directories." -Category Information
- 7z x %zip% "-o%pgroot%"
- ps: |
    if ("$env:pg" -eq "master") {
      Set-Content -path pg.pass -value "$env:pgpassword" -encoding ascii
      initdb -A md5 -U "$env:PGUSER" --pwfile=pg.pass C:\pgdata
      pg_ctl register -S demand -N "postgresql$env:x64-$env:pgversion" -D c:\pgdata
    }
- rem Start the database server.
- net start postgresql%x64%-%pgversion%

- appveyor AddTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
- ps: |
    Add-AppveyorTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
    if ("9.4" -eq "$env:pgversion") {
      $env:psqlopt="--psqldir"
    } else {
      $env:psqlopt="--bindir"
    }
    $env:Outcome="Passed"
    $elapsed=(Measure-Command {
      pg_regress "$env:psqlopt=$env:pgroot\bin" --dbname=pl_regression `
             install no_system_period invalid_system_period no_history_table `
             no_history_system_period invalid_types invalid_system_period_values `
             versioning versioning_custom_system_time structure uninstall 2>&1 |
        %{ if ($_ -is [System.Management.Automation.ErrorRecord]) { $_.Exception.Message } else { $_ } } |
          Out-Default
      if ($LASTEXITCODE -ne 0) {
        $env:Outcome="Failed"
      }
    }).TotalMilliseconds
    Update-AppVeyorTest Regression -Framework pg_regress -FileName sql\ -Outcome "$env:Outcome" -Duration $elapsed
    if ("$env:Outcome" -ne "Passed") {
      type regression.diffs
      $host.SetShouldExit($LastExitCode)
    }

artifacts:
- path: '*.zip'

deploy:
    # Deploy to GitHub Releases
  - provider: GitHub
    artifact: /.*\.zip/
    draft: false
    prerelease: false
    on:
      branch: master                # release from master branch only
      appveyor_repo_tag: true       # deploy on tag push only
